{"version":3,"sources":["components/User/about/photo-myself.JPG","components/User/navigation/navigation.component.jsx","components/User/experience/experience.component.jsx","firebase/firebase.utils.js","components/User/experience-container/experience-container.component.jsx","components/User/skill/skill.component.jsx","components/User/skills-container/skills-container.component.jsx","components/User/about/about.component.jsx","components/User/custom-button/custom-button.component.jsx","components/User/contact/contact.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","className","Container","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Experience","props","experienceData","name","url","description","fileUrl","Card","target","rel","Img","variant","src","alt","Body","Title","Text","getExperiences","a","firestore","collection","get","experiencesSnapshot","experiences","empty","docs","map","doc","push","data","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ExperienceContainer","useState","setExperienceData","fileExperience","newExperienceData","useEffect","fetchAndSetExperiences","fluid","Row","experience","Col","xs","lg","type","color","height","width","Skill","imgUrl","SkillsContainer","listOfSkills","img","urlWebsite","skill","md","About","picMyself","CustomButton","onSubmit","children","otherProps","onClick","Contact","contactName","changeName","contactAddress","changeAddress","contactMessage","changeMessage","event","preventDefault","sendFeedback","message_html","from_name","reply_to","templateId","variables","window","emailjs","send","then","res","document","getElementById","classList","remove","add","querySelector","reset","console","log","catch","err","Form","Control","placeholder","onChange","value","Group","controlId","as","rows","App","state","this","React","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3ef0c3d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/photo-myself.c2c50dcc.JPG\";","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nimport './Navigation.css';\n\nconst Navigation = () => {\n    return(\n        <header className=\"bg-light\">\n            <Container>\n                <Navbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand href=\"#\">Mael Landrin</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"ml-navbar\" />\n                    <Navbar.Collapse id=\"ml-navbar\">\n                        <Nav>\n                            <Nav.Link href=\"#aboutScroll\" className=\"animated infinite pulse\">About</Nav.Link>\n                            <Nav.Link href=\"#experienceScroll\" className=\"animated infinite pulse\">Portfolio</Nav.Link>\n                            <Nav.Link href=\"#skillScroll\" className=\"animated infinite pulse\">Skills</Nav.Link>\n                            <Nav.Link href=\"#contactScroll\" className=\"animated infinite pulse\">Contact</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </Container>\n        </header>\n    )\n}\n\nexport default Navigation;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nimport './Experience.css';\n\nconst Experience = (props) => {\n    const {name, url, description, fileUrl} = props.experienceData;\n    return(\n        <Card className=\"card-experience\">\n            \n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Card.Img variant=\"top\" src={fileUrl} alt={name} />\n                <Card.Body>\n                    <Card.Title>{name}</Card.Title>\n                    <Card.Text>\n                        {description}\n                    </Card.Text>\n                </Card.Body>\n            </a>\n        </Card>\n    )\n}\n\nexport default Experience;","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst config = {\n    apiKey: \"AIzaSyA3hVtxPO9SiAS2CS-YBh1Cy7Q3EMJcn-4\",\n    authDomain: \"mael-landrin.firebaseapp.com\",\n    databaseURL: \"https://mael-landrin.firebaseio.com\",\n    projectId: \"mael-landrin\",\n    storageBucket: \"mael-landrin.appspot.com\",\n    messagingSenderId: \"985005520082\",\n    appId: \"1:985005520082:web:60e004e2f3b7fecd39a90b\"\n};\n\nexport const addExperience = async (name, description, url, fileExperience) => {\n    const experienceSnapshot = await firestore.collection('experiences').doc(name).get();\n\n    if(!experienceSnapshot.exists) {\n        // First, taking care of the uploading of the file\n        const storageRef = firebase.storage().ref(fileExperience.name);\n\n        // Uploading file\n        const uploadFile = await storageRef.put(fileExperience);\n\n        // Get file URL to put it in the database\n        const fileUrl = await storageRef.getDownloadURL();\n\n        // Then, creating a new document for this experience\n        await firestore.collection('experiences').doc(name).set({\n            name,\n            url,\n            description,\n            fileUrl\n        });\n\n        return \"Experience successfully added\";\n    } else {\n        return \"There's already an experience for this project\";\n    }\n}\n\n\nexport const getExperiences = async () => {\n    const experiencesSnapshot = await firestore.collection('experiences').get();\n\n    let experiences = [];\n\n    if(!experiencesSnapshot.empty) {\n        experiencesSnapshot.docs.map(doc => {\n            experiences.push(doc.data());\n        });\n\n        return experiences;\n    }\n}\n\n\nfirebase.initializeApp(config);\n\nexport const firestore = firebase.firestore();\n\nexport default firebase;","import React, { useState, useEffect } from 'react';\nimport Experience from '../experience/experience.component';\nimport Loader from 'react-loader-spinner';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n// import ExperienceForm from '../experience-form/experience-form.component';\n\nimport './ExperienceContainer.css';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nimport { addExperience, getExperiences } from '../../../firebase/firebase.utils';\n\nconst ExperienceContainer = () => {\n    const [experienceData, setExperienceData] = useState([]);\n    \n    const [newExperienceData, setNewExperienceData] = useState({\n        name: '',\n        description: '',\n        url: '',\n        fileExperience: ''\n    });\n\n    useEffect(() => {\n        const fetchAndSetExperiences = async () => {\n            const experiences = await getExperiences();\n    \n            setExperienceData(experiences);\n        }\n        fetchAndSetExperiences();\n    }, newExperienceData);\n\n    const handleChange = event => {\n        const { name, value } = event.target;\n        setNewExperienceData({...newExperienceData, [name]: value });\n    }\n\n    const handleFileChange = event => {\n        const file = event.target.files[0];\n        setNewExperienceData({...newExperienceData, fileExperience: file});\n        console.log(file);\n        console.log(file.name);\n    }\n\n    const onSubmitChange = async (event) => {\n        event.preventDefault();\n\n        const { name, description, url, fileExperience } = newExperienceData;\n\n        const resultExperience = await addExperience(name, description, url, fileExperience);\n\n        setNewExperienceData({\n            name: '',\n            description: '',\n            url: '',\n            fileExperience: ''\n        })\n\n        document.getElementById('formExperience').reset();\n    }\n\n    return(\n        <Container fluid={true} className=\"experience\">\n            <Container id=\"experienceScroll\">\n                <div className=\"experience-section\">\n                    <h2 className=\"text-center\">My experiences</h2>\n                    {\n                        !experienceData ? \n                        <div className=\"loader\">\n                            <Loader \n                            type=\"Plane\"\n                            color=\"#00BFFF\"\n                            height={300}\n                            width={300}\n                            /> \n                        </div> :\n                        <div>\n                            <p className=\"text-center\">Here are most of the websites I fully/partly did</p>\n                            <Row>\n                                {\n                                    experienceData.map(experience => {\n                                        return(\n                                            <Col xs={12} lg={4}>\n                                                <Experience experienceData={experience} />\n                                            </Col>\n                                        )\n                                    })\n                                }                            \n                            </Row>\n                        </div>\n                    }\n                </div>\n            </Container>\n            {/* <ExperienceForm handleChange={handleChange} handleFileChange={handleFileChange} onSubmitChange={onSubmitChange} /> */}\n        </Container>\n    )\n}\n\nexport default ExperienceContainer;","import React from 'react';\n\nimport './Skill.css';\n\nconst Skill = (props) => {\n    return(\n        <div className=\"single-skill\">\n            <div className=\"inner-skill\">\n                <div className=\"skill-img-wrap bg-light\">\n                    <img src={props.imgUrl} alt={props.name} />\n                    <h2>{props.name}</h2>\n                </div>\n            </div>  \n        </div>\n    )\n}\n\nexport default Skill;","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Skill from '../skill/skill.component';\nimport Container from 'react-bootstrap/Container';\n\nimport './SkillsContainer.css';\n\n\n\nconst SkillsContainer = (props) => {\n    const listOfSkills = [\n        {\n            name: 'PHP',\n            img: props.urlWebsite+'/img/php.png'\n        },\n        {\n            name: 'JavaScript',\n            img: props.urlWebsite+'/img/javascript.png' \n        },\n        {\n            name: 'Node.js',\n            img: props.urlWebsite+'/img/nodejs.png'\n        },\n        {\n            name: 'React',\n            img: props.urlWebsite+'/img/react.png'\n        },\n        {\n            name: 'CSS',\n            img: props.urlWebsite+'/img/css.png'\n        },\n        {\n            name: 'HTML',\n            img: props.urlWebsite+'/img/html.png'\n        },\n        {\n            name: 'Git',\n            img: props.urlWebsite+'/img/git.png'\n        },\n        {\n            name: 'WordPress',\n            img: props.urlWebsite+'/img/wordpress.png'\n        }\n    ]\n\n    return(\n        <Container fluid={true} className=\"container-fluid skills\">\n            <Container id=\"skillScroll\">\n                <h2 className=\"text-center\">Skills</h2>\n                <div className=\"skillscontainer\">\n                    <Row>\n                        {\n                            listOfSkills.map(skill => {\n                                return (\n                                    <Col xs={12} md={3}>\n                                        <Skill name={skill.name} imgUrl={skill.img} />\n                                    </Col>\n                                )\n                            })\n                        }\n                    </Row>\n                </div>\n            </Container>\n        </Container>\n    )\n}\n\nexport default SkillsContainer;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nimport picMyself from './photo-myself.JPG';\n\nimport './about.css';\n\nconst About = () => {\n    return(\n        <Container>\n            <div className=\"about-section\" id=\"aboutScroll\">\n                <h2>About me</h2>\n                <div className=\"picAndText\">\n                    <img src={picMyself} alt=\"it's-a me a-Mael\" />\n                    <p>I'm a freelance web developer. I dropped out of college without a degree because I was bored of school. I started web development with the basics of HTML and CSS, and learnt on the job.</p>\n                </div>\n                <h2>My skills and experiences</h2>\n                <p>I've been working with WordPress for more than 2 years ( with minimal plugins, only CF7, ACF ), learnt JavaScript for animation purposes during these 2 years. I also started learning React and Node.JS in November 2019.</p>\n                <p>I made this website using React and Node as a training project, and I've got a few projects in mind that I'll add to my own website. So stay tuned :)</p>\n            </div>\n        </Container>\n    )\n}\n\nexport default About;\n\n","import React from 'react';\n\nimport './custom-button.styles.scss';\n\nconst CustomButton = ({ onSubmit, children, ...otherProps }) => {\n    return (\n        <button className=\"custom-button\" onClick={onSubmit} {...otherProps} >\n            {children}\n        </button>\n    )\n}\n\nexport default CustomButton;","import React, {useState} from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\n\nimport CustomButton from '../custom-button/custom-button.component';\n\nimport './Contact.css';\n\nconst Contact = () => {\n    // Before, using Class Component\n//class Contact extends Component {\n    // constructor() {\n    //     super()\n    //     this.state = {\n    //         contactName: '',\n    //         contactAddress: '',\n    //         contactMessage: ''\n    //     }\n    // }\n\n    const [contactName, changeName] = useState('');\n    const [contactAddress, changeAddress] = useState('');\n    const [contactMessage, changeMessage] = useState('');\n\n    const onNameChange = (event) => {\n        changeName(event.target.value);\n    }\n    \n    const onAddressChange = (event) => {\n        changeAddress(event.target.value);\n    }\n    \n    const onMessageChange = (event) => {\n        changeMessage(event.target.value);\n    }\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n\n        const templateId = 'template_c2dM1esL';\n\n        sendFeedback(templateId, {message_html: contactMessage, from_name: contactName, reply_to: contactAddress});\n\n        \n\n        // fetch('https://app-d077afa0-d0a4-4d67-8720-1d7a756510d8.cleverapps.io/send-email', {\n        //     method: 'POST',\n        //     headers: {'Content-Type': 'application/json'},\n        //     body: JSON.stringify({\n        //         name: contactName,\n        //         address: contactAddress,\n        //         message: contactMessage\n        //     })\n        // })\n        // .then(resp => {\n        //     if(resp.status === 400) {\n        //         document.getElementById('contactTrue').classList.remove('contact-displayed');\n        //         document.getElementById('contactFalse').classList.add('contact-displayed');\n        //     } else if(resp.status === 200) {\n        //         document.getElementById('contactFalse').classList.remove('contact-displayed');\n        //         document.getElementById('contactTrue').classList.add('contact-displayed');\n        //     }\n        // })\n    }\n\n    const sendFeedback = (templateId, variables) => {\n        window.emailjs.send(\n          'gmail', templateId,\n          variables\n          ).then(res => {\n            document.getElementById('contactFalse').classList.remove('contact-displayed');\n            document.getElementById('contactTrue').classList.add('contact-displayed');\n            document.querySelector('.contact-form').reset();\n            console.log('test');\n          })\n          .catch(err => {\n            document.getElementById('contactTrue').classList.remove('contact-displayed');\n            document.getElementById('contactFalse').classList.add('contact-displayed');\n            console.log('fail');\n          })\n    }\n\n    return(\n        <Container className=\"contact-section\" id=\"contactScroll\">\n            <h2>Contact me</h2>\n            <Form className=\"contact-form\">\n                <Form.Row className=\"toprow-contact\">\n                    <Col>\n                        <Form.Control id=\"contactName\" placeholder=\"Name\" onChange={onNameChange} />\n                    </Col>\n                    <Col>\n                        <Form.Control id=\"contactAddress\" type=\"email\" placeholder=\"Email address\" onChange={onAddressChange} />\n                    </Col>\n                </Form.Row>\n                <Form.Group controlId=\"contactForm.contactMessage\" id=\"contactMessage\">\n                    <Form.Control as=\"textarea\" rows=\"5\" placeholder=\"Your message\" onChange={onMessageChange} />\n                </Form.Group>\n                <CustomButton type=\"button\" onSubmit={onSubmit}>\n                    Send\n                </CustomButton>\n                <div className=\"error-contact\" id=\"contactFalse\">Error sending email, please try again :(</div>\n                <div className=\"success-contact\" id=\"contactTrue\">Email sent successfully, thanks :)</div>\n            </Form>\n        </Container>\n    )\n}\n\nexport default Contact;\n\n","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Navigation from './components/User/navigation/navigation.component';\nimport ExperienceContainer from './components/User/experience-container/experience-container.component';\nimport SkillsContainer from './components/User/skills-container/skills-container.component';\nimport About from './components/User/about/about.component';\nimport Contact from './components/User/contact/contact.component';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      urlWebsite: 'https://monkeyfeeder.github.io/mael-landrin',\n      // isLoggedIn: false,\n    }\n  }\n\n  componentDidMount() {\n    // this.setState({isLoggedIn: true});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <About />\n        <ExperienceContainer />\n        <SkillsContainer urlWebsite={this.state.urlWebsite} />\n        <Contact />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}